<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Load Test Web Service enrollTournament" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="testHome" elementType="Argument">
            <stringProp name="Argument.name">testHome</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer fileserver.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="courseId" elementType="Argument">
            <stringProp name="Argument.name">courseId</stringProp>
            <stringProp name="Argument.value">9000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="courseExecutionId" elementType="Argument">
            <stringProp name="Argument.name">courseExecutionId</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topicId" elementType="Argument">
            <stringProp name="Argument.name">topicId</stringProp>
            <stringProp name="Argument.value">11000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tournamentId" elementType="Argument">
            <stringProp name="Argument.name">tournamentId</stringProp>
            <stringProp name="Argument.value">12000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userId" elementType="Argument">
            <stringProp name="Argument.name">userId</stringProp>
            <stringProp name="Argument.value">676</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">sampleReq_1</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/tutordb?autoReconnect=true</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="username">rafael</stringProp>
          <stringProp name="password">tagus</stringProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">sampleReq_1</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">INSERT INTO courses(id, name, type) VALUES (${courseId},&apos;COURSE_NAME1&apos;, &apos;TECNICO&apos;),
								(${courseId}+1,&apos;COURSE_NAME2&apos;, &apos;TECNICO&apos;),
								(${courseId}+2,&apos;COURSE_NAME3&apos;, &apos;TECNICO&apos;),
								(${courseId}+3,&apos;COURSE_NAME4&apos;, &apos;TECNICO&apos;),
								(${courseId}+4,&apos;COURSE_NAME5&apos;, &apos;TECNICO&apos;);

INSERT INTO course_executions(id, acronym, academic_term, course_id) VALUES (${courseExecutionId}, &apos;ACRONYM&apos;, &apos;ACADEMIC_TERM&apos;, ${courseId}),
								(${courseExecutionId}+1, &apos;ACRONYM&apos;, &apos;ACADEMIC_TERM&apos;, ${courseId}+1),
								(${courseExecutionId}+2, &apos;ACRONYM&apos;, &apos;ACADEMIC_TERM&apos;, ${courseId}+2),
								(${courseExecutionId}+3, &apos;ACRONYM&apos;, &apos;ACADEMIC_TERM&apos;, ${courseId}+3),
								(${courseExecutionId}+4, &apos;ACRONYM&apos;, &apos;ACADEMIC_TERM&apos;, ${courseId}+4);

INSERT INTO topics(id, name, course_id) VALUES (${topicId}, &apos;TOPIC_NAME_1&apos;, ${courseId}), 
									(${topicId}+1,&apos;TOPIC_NAME_2&apos;, ${courseId}),
									(${topicId}+2, &apos;TOPIC_NAME_1&apos;, ${courseId}+1), 
									(${topicId}+3,&apos;TOPIC_NAME_2&apos;, ${courseId}+1),
									(${topicId}+4, &apos;TOPIC_NAME_1&apos;, ${courseId}+2), 
									(${topicId}+5,&apos;TOPIC_NAME_2&apos;, ${courseId}+2),
									(${topicId}+6,&apos;TOPIC_NAME_1&apos;, ${courseId}+3),
									(${topicId}+7, &apos;TOPIC_NAME_2&apos;, ${courseId}+3), 
									(${topicId}+8,&apos;TOPIC_NAME_1&apos;, ${courseId}+4),									
									(${topicId}+9, &apos;TOPIC_NAME_2&apos;, ${courseId}+4);
									
INSERT INTO users_course_executions VALUES (${userId}, ${courseExecutionId}),
								(${userId}, ${courseExecutionId}+1),
								(${userId}, ${courseExecutionId}+2),
								(${userId}, ${courseExecutionId}+3),
								(${userId}, ${courseExecutionId}+4);
								
INSERT INTO tournaments VALUES (${tournamentId}, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-1&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+1, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-2&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+2, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-3&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+3, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-4&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+4, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-5&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+5, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-6&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+6, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-7&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+7, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-8&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+8, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-9&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+9, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-10&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+10, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-11&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+11, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-12&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+12, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-13&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+13, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-14&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+14, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-15&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+15, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-16&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+16, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-17&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+17, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-18&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+18, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-19&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+19, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-20&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+20, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-21&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+21, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-22&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+22, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-23&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+23, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-24&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+24, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-25&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+25, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-26&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+26, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-27&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+27, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-28&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+28, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-29&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+29, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-30&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+30, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-31&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+31, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-32&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+32, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-33&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+33, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-34&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+34, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-35&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+35, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-36&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+36, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-37&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+37, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-38&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+38, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-39&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+39, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-40&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+40, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-41&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+41, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-42&apos;, 4, ${courseExecutionId}, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+42, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-43&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+43, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-44&apos;, 4, ${courseExecutionId}+1, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+44, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-45&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+45, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-46&apos;, 4, ${courseExecutionId}+2, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+46, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-47&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+47, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-48&apos;, 4, ${courseExecutionId}+3, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+48, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-49&apos;, 4, ${courseExecutionId}+4, ${userId});
INSERT INTO tournaments VALUES (${tournamentId}+49, &apos;2020-03-26 12:30:00&apos;, &apos;2020-03-26 13:00:00&apos;, False, &apos;Demo-tournament-50&apos;, 4, ${courseExecutionId}+4, ${userId});</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">				</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="50 Users Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Demo Student" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/demo/student</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Authenticated Requests" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">50</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">EnrollTournamentData.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">offset1, offset2</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request to enroll in a tournament" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/courseExecution/${__intSum(${courseExecutionId},${offset1})}/tournament/${__intSum(${tournamentId},${offset2})}/enrollTournament</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">sampleReq</stringProp>
          <stringProp name="dbUrl">jdbc:postgresql://localhost:5432/tutordb?autoReconnect=true</stringProp>
          <stringProp name="driver">org.postgresql.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">tagus</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">rafael</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">sampleReq</stringProp>
          <stringProp name="query">DELETE FROM users_tournaments_created_by_me WHERE user_id = ${userId};
DELETE FROM topics_tournaments WHERE titles_id BETWEEN (${topicId}) and (${topicId}+9) ;
DELETE FROM tournaments_students_enrolled WHERE students_enrolled_id = ${userId};
DELETE FROM tournaments WHERE id BETWEEN ${tournamentId} and ${tournamentId}+49;
DELETE FROM topics WHERE name = &apos;TOPIC_NAME_1&apos; or name = &apos;TOPIC_NAME_2&apos;;
DELETE FROM users_course_executions WHERE course_executions_id BETWEEN ${courseExecutionId} and ${courseExecutionId}+4;
DELETE FROM course_executions WHERE id BETWEEN ${courseExecutionId} and ${courseExecutionId}+4;
DELETE FROM courses WHERE id BETWEEN ${courseId} and ${courseId}+4;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
